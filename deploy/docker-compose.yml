version: '3.7'

services:
    postgres:
        container_name: discordbot_postgres
        image: postgres:14.2
        restart: always
        environment:
          - POSTGRES_USER=${POSTGRES_USER}
          - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          - PGPORT=9744
        ports:
          - '9744:9744'
        volumes: 
          - ./postgres-data:/var/lib/postgresql/data
          - ../migrations/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U postgres"]
          interval: 5s
          timeout: 5s
          retries: 5
        networks:
          app_subnet:
            ipv4_address: 172.40.10.10

    app:
      container_name: discordbot_app
      image: meximonster/discord-bot:latest
      security_opt:
        - seccomp:unconfined
      ports:
        - "9999:9999"
      volumes:
        - ${PWD}/../.env:/usr/src/go-discordbot/.env
      depends_on:
        postgres:
          condition: service_healthy
      networks:
        app_subnet:
          ipv4_address: 172.40.10.11

    display_app:
      container_name: display_app
      image: meximonster/display-app:latest
      environment:
        - PGUSER=${POSTGRES_USER}
        - PGPASSWORD=${POSTGRES_PASSWORD}
        - PGHOST=postgres
        - PGDATABASE=postgres
        - PGPORT=9744
      ports:
        - "3000:3000"
      depends_on:
        postgres:
          condition: service_healthy
      networks:
        app_subnet:
          ipv4_address: 172.40.10.12

volumes:
  postgres-data:

networks:
  app_subnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.40.10.0/24